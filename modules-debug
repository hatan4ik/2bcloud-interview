#### THe main root main.tf:
module "network_security_groups" {
  source              = "./modules/network_security_groups"
  nsgs                = var.nsgs
  resource_group_name = data.azurerm_resource_group.main.name
  location            = data.azurerm_resource_group.main.location
  subnets             = var.subnets
}

  module "subnets" {
    source              = "./modules/subnets"
    subnets             = var.subnets
    resource_group_name = data.azurerm_resource_group.main.name
    vnet_name           = azurerm_virtual_network.vnet.name
    nsg_ids             = module.network_security_groups.security_group_ids
    location            = data.azurerm_resource_group.main.location
    route_table_ids     = var.route_table_ids
    #route_table_ids     =  module.subnets.route_table_ids

  }
##### Modules bellow #################################

# Subnet resource with optional service endpoints
resource "azurerm_subnet" "subnet" {
  for_each             = var.subnets
  name                 = each.key
  resource_group_name  = var.resource_group_name
  virtual_network_name = var.vnet_name
  address_prefixes     = [each.value.address_prefix]
  service_endpoints    = try(each.value.service_endpoints, [])
}

# # NSG association with subnets if specified in `nsg_ids`
resource "azurerm_subnet_network_security_group_association" "subnet_nsg_association" {
  for_each = { for subnet_name, nsg_id in var.subnets : subnet_name => nsg_id if lookup(var.nsg_ids, subnet_name, null) != null }

  subnet_id                 = azurerm_subnet.subnet[each.key].id
  network_security_group_id = var.nsg_ids[each.key]
}
# resource "azurerm_subnet_network_security_group_association" "subnet_nsg_association" {
#   for_each = { for subnet_name, nsg_id in var.nsg_ids : subnet_name => nsg_id if contains(keys(azurerm_subnet.subnet), subnet_name) }

#   subnet_id                 = azurerm_subnet.subnet[each.key].id
#   network_security_group_id = each.value
# }


# # Route Table association with subnets if specified in `route_table_ids`
resource "azurerm_subnet_route_table_association" "subnet_route_association" {
  for_each = { for subnet_name, route_table_id in var.subnets : subnet_name => route_table_id if lookup(var.route_table_ids, subnet_name, null) != null }

  subnet_id      = azurerm_subnet.subnet[each.key].id
  route_table_id = var.route_table_ids[each.key]
}
# resource "azurerm_subnet_route_table_association" "subnet_route_association" {
#   for_each = { for subnet_name, route_table_id in var.route_table_ids : subnet_name => route_table_id if contains(keys(azurerm_subnet.subnet), subnet_name) }

#   subnet_id      = azurerm_subnet.subnet[each.key].id
#   route_table_id = each.value
# }
output "subnet_ids" {
  value       = { for name, subnet in azurerm_subnet.subnet : name => subnet.id }
  description = "A map of subnet names to their respective IDs."
}


// Debug modules/subnets/outputs.tf
output "nsg_association_debug" {
  value = azurerm_subnet_network_security_group_association.subnet_nsg_association
}

output "route_table_association_debug" {
  value = azurerm_subnet_route_table_association.subnet_route_association
}

// modules/subnets/outputs.tf// modules/subnets/outputs.tf
output "nsg_associations" {
  value = {
    for subnet_name, assoc in azurerm_subnet_network_security_group_association.subnet_nsg_association : subnet_name => assoc.network_security_group_id
  }
  description = "Map of NSG associations for each subnet"
}

output "route_table_associations" {
  value = {
    for subnet_name, assoc in azurerm_subnet_route_table_association.subnet_route_association : subnet_name => assoc.route_table_id
  }
  description = "Map of Route Table associations for each subnet"
}

variable "subnets" {
  description = "Map of subnets with their address prefixes and optional service endpoints"
  type = map(object({
    address_prefix    = string
    service_endpoints = optional(list(string), [])
  }))
}

variable "nsg_ids" {
  description = "Map of subnet names to NSG IDs for association"
  type        = map(string)
  default     = {}
}

variable "route_table_ids" {
  description = "Map of subnet names to Route Table IDs for association"
  type        = map(string)
  default     = {}
}

variable "resource_group_name" {
  description = "Name of the resource group for the subnets"
  type        = string
}

variable "vnet_name" {
  description = "Name of the virtual network"
  type        = string
}

variable "location" {
  description = "Location for the subnets"
  type        = string
}

# Network Security Groups with optional security rules
resource "azurerm_network_security_group" "nsg" {
  for_each            = var.nsgs
  name                = each.key
  location            = var.location
  resource_group_name = var.resource_group_name

  dynamic "security_rule" {
    for_each = try(each.value.rules, [])
    content {
      name                       = security_rule.value.name
      priority                   = security_rule.value.priority
      direction                  = security_rule.value.direction
      access                     = security_rule.value.access
      protocol                   = security_rule.value.protocol
      source_port_range          = security_rule.value.source_port_range
      destination_port_range     = security_rule.value.destination_port_range
      source_address_prefix      = security_rule.value.source_address_prefix
      destination_address_prefix = security_rule.value.destination_address_prefix
    }
  }
}

# Default NSG rule to allow VNet-local traffic if enabled
resource "azurerm_network_security_rule" "vnet_local_allow" {
  for_each                    = var.nsgs
  name                        = "AllowVNetInBound-${each.key}"
  priority                    = 100
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "*"
  source_port_range           = "*"
  destination_port_range      = "*"
  source_address_prefix       = "VirtualNetwork"
  destination_address_prefix  = "VirtualNetwork"
  network_security_group_name = azurerm_network_security_group.nsg[each.key].name
  resource_group_name         = var.resource_group_name
}
output "security_group_ids" {
  value       = { for key, nsg in azurerm_network_security_group.nsg : key => nsg.id }
  description = "Map of NSG IDs by name"
}
output "nsg_ids" {
  value = { for key, nsg in azurerm_network_security_group.nsg : key => nsg.id }
}
variable "nsgs" {
  description = "Map of Network Security Groups (NSGs) with optional rules"
  type        = map(object({
    rules = optional(list(object({
      name                       = string
      priority                   = number
      direction                  = string
      access                     = string
      protocol                   = string
      source_port_range          = string
      destination_port_range     = string
      source_address_prefix      = string
      destination_address_prefix = string
    })), [])
  }))
}

variable "resource_group_name" {
  type        = string
  description = "The name of the resource group containing the NSGs."
}

variable "location" {
  type        = string
  description = "The location for the NSGs in this module."
}
variable "subnets" {
  type        = map(any)
  description = "Map of subnets for use within NSG module if needed."
}
